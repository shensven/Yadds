name: Publish

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}

jobs:
  get_version:
    name: Get version
    runs-on: ubuntu-latest
    if: ${{ github.repository_owner == 'shensven' }}
    outputs:
      APP_VERSION: ${{ steps.get-version.outputs.APP_VERSION }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Get version from package.json
        id: get-version
        run: |
          APP_VERSION=$(node -e "console.log(require('./release/app/package.json').version)")
          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_OUTPUT

  build_dmg_target:
    name: Build dmg target
    needs: get_version
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm run postinstall
          npm run build
          npm run package:dmg

      - uses: actions/upload-artifact@v3
        with:
          name: dmg-${{ needs.get_version.outputs.APP_VERSION }}
          path: |
            release/build/*.dmg
            release/build/*.blockmap

  build_mas_target:
    name: Build mas target
    needs: get_version
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Restore provisionprofile
        run: |
          cd build
          echo -n "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > embedded.provisionprofile

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm run postinstall
          npm run build
          npm run package:mas
          xcrun altool --upload-app \
            --type macos \
            --file "release/build/mas/YaddsElectron-${{ needs.get_version.outputs.APP_VERSION }}.pkg" \
            --username "$APPLE_ID" \
            --password "$APPLE_ID_PASS"

  build_nsis_target:
    name: Build nsis target
    needs: get_version
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        env:
          WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
          WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}
        run: |
          npm run postinstall
          npm run build
          npm run package:nsis

      - uses: actions/upload-artifact@v3
        with:
          name: nsis-${{ needs.get_version.outputs.APP_VERSION }}
          path: |
            release/build/*.exe
            release/build/*.blockmap

  build_appx_target:
    name: Build appx target
    needs: get_version
    runs-on: windows-latest
    outputs:
      APP_VERSION: ${{ steps.get-version.outputs.APP_VERSION }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        run: |
          npm run postinstall
          npm run build
          npm run package:appx

      # - uses: actions/upload-artifact@v2
      #   with:
      #     name: appx-${{ needs.get_version.outputs.APP_VERSION }}
      #     path: |
      #       release/build/*.appx

  build_linux_target:
    name: Build linux target
    needs: get_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        run: |
          npm run postinstall
          npm run build
          npm run package:linux

      - uses: actions/upload-artifact@v3
        with:
          name: linux-${{ needs.get_version.outputs.APP_VERSION }}
          path: |
            release/build/*.AppImage
            release/build/*.deb
            release/build/*.rpm

  build_snap_target:
    name: Build snap target
    needs: get_version
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Insert github.run_number into electron.common.json
        run: npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: npm ci

      - name: Package
        run: |
          npm run postinstall
          npm run build
          npm run package:snap

      # - uses: snapcore/action-publish@v1
      #   env:
      #     SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_CREDENTIALS }}
      #   with:
      #     snap: 'release/build/yaddselectron_${{ needs.get_version.outputs.APP_VERSION }}_amd64.snap'
      #     release: edge

  publish:
    name: Publish
    needs: [get_version, build_dmg_target, build_nsis_target, build_linux_target]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: download

      - name: Move artifacts
        run: |
          mkdir -p staged
          mv download/dmg-${{ needs.get_version.outputs.APP_VERSION }}/* staged
          mv download/nsis-${{ needs.get_version.outputs.APP_VERSION }}/* staged
          mv download/linux-${{ needs.get_version.outputs.APP_VERSION }}/* staged

      - uses: ncipollo/release-action@v1.11.2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ needs.get_version.outputs.APP_VERSION }}
          tag: ${{ needs.get_version.outputs.APP_VERSION }}
          allowUpdates: true
          draft: true
          artifacts: 'staged/*.*'
