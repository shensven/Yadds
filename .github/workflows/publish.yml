name: Publish

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}

jobs:
  publish_outside:
    name: Publish Outside
    if: ${{ github.repository_owner == 'shensven' }}

    runs-on: ${{ matrix.os }}

    env:
      # These values are used for auto updates signing
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
      WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v1

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Get version
        id: get_version
        shell: bash
        run: |
          YADDS_VERSION=$(node -e "console.log(require('./release/app/package.json').version)")
          echo ::set-output name=yadds_version::$YADDS_VERSION

      - name: Rewritten buildVersion
        run: |
          npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Install dependencies
        run: |
          npm install

      - name: Release for win
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:win

      - name: Release for mac
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:mac

      - name: Release for linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:linux

      - name: Upload artifacts
        uses: ncipollo/release-action@v1.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.get_version.outputs.yadds_version }}
          tag: ${{ steps.get_version.outputs.yadds_version }}
          allowUpdates: true
          draft: true
          artifacts: 'release/build/*.exe,release/build/*.dmg,release/build/*.blockmap,release/build/*.AppImage,release/build/*.deb,release/build/*.rpm'

  publish_app_store:
    name: Publish Store
    if: ${{ github.repository_owner == 'shensven' }}

    runs-on: ${{ matrix.os }}

    env:
      # These values are used for auto updates signing
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
      WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]

    steps:
      - name: Checkout git repo
        uses: actions/checkout@v1

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Rewritten buildVersion
        run: |
          npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Restore provisionprofile
        run: |
          cd build
          echo "${{ secrets.EMBEDDED_PROVISIONPROFILE_ASC }}" > embedded.provisionprofile.asc
          gpg -d --passphrase ${{ secrets.EMBEDDED_PROVISIONPROFILE_PASSPHRASE }} --batch embedded.provisionprofile.asc > embedded.provisionprofile

      - name: Install dependencies
        run: |
          npm install

      # - name: Release for uwp
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: |
      #     npm run postinstall
      #     npm run build
      #     npm run release:uwp
      #     ls release/build

      - name: Release for mas
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:mas

      - name: Release for snap
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:snap

      - name: Upload artifacts
        uses: ncipollo/release-action@v1.10.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: app-store
          tag: app-store
          allowUpdates: true
          draft: true
          artifacts: 'release/build/mas/*.pkg,release/build/*.snap'
