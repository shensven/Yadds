name: Publish

on:
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}

jobs:
  publish_outside:
    name: Publish Outside
    if: ${{ github.repository_owner == 'shensven' }}

    runs-on: ${{ matrix.os }}

    env:
      # These values are used for auto updates signing
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
      CSC_LINK: ${{ secrets.CSC_LINK }}
      CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
      WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Rewritten buildVersion
        run: |
          npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Get version
        id: get_version
        shell: bash
        run: |
          YADDS_VERSION=$(node -e "console.log(require('./release/app/package.json').version)")
          echo ::set-output name=yadds_version::$YADDS_VERSION

      - name: Install dependencies
        run: |
          npm ci

      - name: Release for Windwos
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:win

      - name: Release for macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:mac

      - name: Release for Linux
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:linux

      - name: Upload to Github
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: ${{ steps.get_version.outputs.yadds_version }}
          tag: ${{ steps.get_version.outputs.yadds_version }}
          allowUpdates: true
          draft: true
          artifacts: 'release/build/*.exe,release/build/*.dmg,release/build/*.blockmap,release/build/*.AppImage,release/build/*.deb,release/build/*.rpm'

  publish_app_store:
    name: Publish App Store
    if: ${{ github.repository_owner == 'shensven' }}

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Cache npm dependencies
        uses: actions/cache@v3
        id: npm-cache
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Rewritten buildVersion
        run: |
          npx -y json -I -f build/electron.common.json -e "this.buildVersion=${{ github.run_number }}"

      - name: Restore provisionprofile
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          cd build
          echo -n "${{ secrets.PROVISIONING_PROFILE_BASE64 }}" | base64 --decode > embedded.provisionprofile

      - name: Get version
        id: get_version
        shell: bash
        run: |
          YADDS_VERSION=$(node -e "console.log(require('./release/app/package.json').version)")
          echo ::set-output name=yadds_version::$YADDS_VERSION

      - name: Install dependencies
        run: |
          npm ci

      - name: Release for Microsoft Store
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:uwp

      - name: Release for Mac App Store & Upload to TestFlight
        if: ${{ matrix.os == 'macos-latest' }}
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
        run: |
          npm run postinstall
          npm run build
          npm run release:mas
          xcrun altool --upload-app \
            --type macos \
            --file "release/build/mas/Yadds-${{ steps.get_version.outputs.yadds_version }}.pkg" \
            --username "$APPLE_ID" \
            --password "$APPLE_ID_PASS"

      - name: Release for Snapcraft
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          npm run postinstall
          npm run build
          npm run release:snap

      - name: Upload to Snap Store
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: snapcore/action-publish@v1
        env:
          SNAPCRAFT_STORE_CREDENTIALS: ${{ secrets.SNAPCRAFT_CREDENTIALS }}
        with:
          snap: 'release/build/yadds_${{ steps.get_version.outputs.yadds_version }}_amd64.snap'
          release: edge

      - name: Backup to GitHub
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: App Store Backup
          tag: app-store-backup
          allowUpdates: true
          draft: true
          artifacts: 'release/build/*.appx,release/build/mas/*.pkg,release/build/*.snap'
